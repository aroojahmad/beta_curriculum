# RPG Dialogue

```elixir
Mix.install([
  {:kino, github: "livebook-dev/kino", override: true},
  {:kino_lab, "~> 0.1.0-dev", github: "jonatanklosko/kino_lab"},
  {:vega_lite, "~> 0.1.3"},
  {:benchee, "~> 0.1"},
  {:ecto, "~> 3.7"},
  {:math, "~> 0.7.0"},
  {:faker, "~> 0.17.0"},
  {:utils, path: "utils"}
])
```

## Navigation

[Return Home](../start.livemd)

## Overview

In this exercise, you're going to generate dialogue for an RPG (Role Playing Game).
This lesson is designed to provide you an opportunity to practice structs and control flow.

### Create A Character Struct

In the Elixir cell below, define a `Character` struct with a `:name`, `:class`, and `:weapon`.
Enforce that the `:name` property exists.

```elixir
defmodule Character do
  @enforce_keys [:name]
  defstruct [:name, :class, :weapon]
end

# strings, integers, maps, tuple, function, binary, list, keyword list, get used to looking at data

Utils.test(:define_character_struct, Character)
```

```elixir
character = %Character{name: "Elixir", weapon: "hammer"}
```

Create character structs with the following information:

```mermaid
classDiagram
  class Arthur {
    class: "warrior"
    weapon: "sword"
  }
  class Gandalf {
    class: "wizard"
    weapon: "staff"
  }
  class Jarlaxle {
    class: "rogue"
    weapon: "daggers"
  }
```

Replace `nil` with each struct.

```elixir
arthur = %Character{name: "Arthur", class: "warrior", weapon: "sword"}
gandalf = %Character{name: "Gandalf", class: "wizard", weapon: "staff"}
jarlaxle = %Character{name: "Jarlaxle", class: "rogue", weapon: "daggers"}

Utils.test(:character_structs, [arthur, gandalf, jarlaxle])
```

### Create A Dialogue Module

In the Elixir cell below.

* Create a `Dialogue.greet/1` function which accepts a character struct and returns the following dialogue.

<!-- livebook:{"force_markdown":true} -->

```elixir
character = %Character{name: "Peter"}
Dialogue.greet(character)
"Hello, my name is Peter."
```

* Create a `Dialogue.attack/2` function which accepts a character and returns the following dialogue.
  ```elixir
                      character = %Character{name: "Arthur", weapon: "sword"}
                      enemy = "Mordred"

                      Dialogue.attack(character, enemy)
                      "Arthur attacks Mordred with a sword."
  ```

<!-- livebook:{"break_markdown":true} -->

* Create a `Dialogue.relinquish_weapon/1` function which returns different dialogue depending on the character's class.
  * `"rogue"`: `"Fine, have my #{character.weapon}. I have more hidden anyway."`
  * `"wizard"`: `"You would not part an old man from his walking stick?"`
  * `"warrior"`: `"Have my #{character.weapon} then!"`
  * any other class: `"My precious!"`

For example,

<!-- livebook:{"force_markdown":true} -->

```elixir
character = %Character{name: "Vax", class: "rogue", weapon: "daggers"}

Dialogue.relinquish_weapon(character)
"Fine, have my daggers. I have more hidden anyway."
```

<!-- livebook:{"break_markdown":true} -->

* Create a function `Dialogue.matching_weapon/1` that returns different dialogue depending on
  the character's class and weapon.
  * `"wizard"` and `"staff"`: `"My lovely magical staff."`
  * `"rogue"` and `"daggers"`: `"Hidden and deadly."`
  * `"warrior"` and `"sword"`: `"My noble sword!"`
  * any class and no weapon (`nil`): `"I'm unarmed!"`
  * any other combination: `"I'm not sure a #{character.weapon} suits a #{character.class}."`

For example,

<!-- livebook:{"force_markdown":true} -->

```elixir
character = %Character{name: "Vax", class: "rogue", weapon: "daggers"}
Dialogue.relinquish_weapon(character)
"Hidden and deadly."

character = %Character{name: "Taako", class: "wizard", weapon: "mace"}
Dialogue.relinquish_weapon(character)
"I'm not sure a mace suits a wizard."
```

```elixir
defmodule Dialogue do
  
  def greet(character) do
    "Hello, my name is #{character}"
  end

  def attack(character, enemy) do
    "#{character} attacks #{enemy} with a sword."
  end

  def relinquish_weapon(character) do
    "rogue": "Fine, have my #{character.weapon}. I have more hidden anyway."
    "wizard": "You would not part an old man from his walking stick?"
    "warrior": "Have my #{character.weapon} then!"
    any other class: "My precious!"
  end

  def matching_weapon(character) do
    "wizard" and "staff": "My lovely magical staff."
    "rogue" and "daggers": "Hidden and deadly."
    "warrior" and "sword": "My noble sword!"
    any class and no weapon (nil): "I'm unarmed!"
    any other combination: "I'm not sure a #{character.weapon} suits a #{character.class}."
  end
end

Utils.test(:character_dialogue, Dialogue)
```
